#include <iostream>
#include <string>
#include <fstream>
#include <regex>

using namespace std;

const string FILE_NAME = "projict_File.txt";

struct Human {
    int number;
    string email, fname, Lname, job;
};

struct Node {
    Human data;
    Node* next;
};

Node* head = nullptr, * newnode, * temp;

bool isValidEmail(const string& email) {
    const regex pattern("(\\w+)(\\.|_)?(\\w*)@(\\w+)(\\.(\\w+))+");
    return regex_match(email, pattern);
}

// Function declarations
void insert();
void searching();
void display();
void deleteNodeAction(int choice, const string& deleteline, ofstream& temp, ifstream& file);
void delete_node();
void edit_node();
bool isFileOpen(ifstream& file, const string& filename);
bool isFileOpen(ofstream& file, const string& filename);

int main() {
    char ans;
    do {
        int choice;
        cout << "1. Add new record\n"
            << "2. Delete record\n"
            << "3. Display records\n"
            << "4. Search records\n"
            << "5. Delete all records\n"
            << "6. Edit records\n"
            << "7. Exit\n"
            << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            insert();
            break;
        case 2:
            delete_node();
            break;
        case 3:
            display();
            break;
        case 4:
            searching();
            break;
        case 5:
            // Delete all records
            remove(FILE_NAME.c_str());
            cout << "All records removed." << endl;
            break;
        case 6:
            edit_node();
            break;
        case 7:
            // Exit the program
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
            break;
        }

        cout << "Do you want to continue? (Y/N): ";
        cin >> ans;
    } while (ans == 'Y' || ans == 'y');

    return 0;
}

bool isFileOpen(ifstream& file, const string& filename) {
    file.open(filename);
    if (!file.is_open()) {
        cout << "Error opening file: " << filename << endl;
        return false;
    }
    return true;
}

bool isFileOpen(ofstream& file, const string& filename) {
    file.open(filename, ios::app);
    if (!file.is_open()) {
        cout << "Error opening file: " << filename << endl;
        return false;
    }
    return true;
}

void insert() {
    ofstream file;
    if (!isFileOpen(file, FILE_NAME)) {
        return;
    }

    newnode = new Node;

    cin.ignore();
    cout << "Enter First Name: ";
    getline(cin, newnode->data.fname);
    file << "first name: " << newnode->data.fname << endl;

    cout << "Enter Last Name: ";
    getline(cin, newnode->data.Lname);
    file << "last name: " << newnode->data.Lname << endl;

    cout << "Enter Number: ";
    cin >> newnode->data.number;
    if (to_string(newnode->data.number).length() != 11) {
        cout << "Invalid number" << endl;
        file << "invalid number" << endl;
    }
    else {
        file << "number: " << newnode->data.number << endl;
    }

    cout << "Enter Email: ";
    cin >> newnode->data.email;
    if (isValidEmail(newnode->data.email)) {
        file << "email: " << newnode->data.email << endl;
    }
    else {
        cout << "Invalid email" << endl;
        file << "invalid email" << endl;
    }

    cin.ignore();
    cout << "Enter Job: ";
    getline(cin, newnode->data.job);
    file << "job: " << newnode->data.job << endl;

    file << "\n **************************************" << endl;

    file.close();

    newnode->next = nullptr;
    if (head == nullptr) {
        head = newnode;
        temp = newnode;
    }
    else {
        temp->next = newnode;
        temp = newnode;
    }
}

void searching() {
    ifstream file;
    if (!isFileOpen(file, FILE_NAME)) {
        return;
    }

    string line, search;
    cout << "Please enter the first name : ";
    cin >> search;

    while (!file.eof()) {
        for (int curLine = 0; getline(file, line);) {
            if (line.find(search) != string::npos) {
                curLine++;

                string last, number, email, job;

                getline(file, last);
                getline(file, number);
                getline(file, email);
                getline(file, job);
                cout << "name is   " << search << endl;
                cout << last << endl;
                cout << number << endl;
                cout << email << endl;
                cout << job << endl;
                file.close();
            }
        }
        break;
    }
}

void display() {
    ifstream file;
    if (!isFileOpen(file, FILE_NAME)) {
        return;
    }

    string data;

    while (getline(file, data)) {
        cout << data << endl;
    }

    file.close();
}

void deleteNodeAction(int choice, const string& deleteline, ofstream& temp, ifstream& file) {
    string line;
    while (getline(file, line)) {
        if (line.find(deleteline) == string::npos) {
            temp << line << endl;
        }
    }
}

void delete_node() {
    ifstream file;
    if (!isFileOpen(file, FILE_NAME)) {
        return;
    }

    ofstream temp("temp.txt");
    int x = 0;
    string deleteline;

    do {
        cout << "1- Delete by First Name\n"
            << "2- Delete by Last Name\n"
            << "3- Delete by Number\n"
            << "4- Delete by Email\n"
            << "5- Delete by Job\n"
            << "6- Exit\n"
            << "Select action: ";
        cin >> x;

        switch (x) {
        case 1:
            cout << "Enter first name: ";
            cin >> deleteline;
            deleteNodeAction(x, deleteline, temp, file);
            break;
        case 2:
            cout << "Enter last name: ";
            cin >> deleteline;
            deleteNodeAction(x, deleteline, temp, file);
            break;
        case 3:
            cout << "Enter number: ";
            cin >> deleteline;
            deleteNodeAction(x, deleteline, temp, file);
            break;
        case 4:
            cout << "Enter email: ";
            cin >> deleteline;
            deleteNodeAction(x, deleteline, temp, file);
            break;
        case 5:
            cout << "Enter job: ";
            cin >> deleteline;
            deleteNodeAction(x, deleteline, temp
                , file);
            break;
        case 6:
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
            break;
        }
    } while (x != 6);

    temp.close();
    file.close();
    remove(FILE_NAME.c_str());
    rename("temp.txt", FILE_NAME.c_str());
}

void edit_node() {
    ifstream file;
    if (!isFileOpen(file, FILE_NAME)) {
        return;
    }

    ofstream temp("temp.txt");
    int x = 0;
    string oldline, editline;

    do {
        cout << "1- Edit First Name\n"
            << "2- Edit Last Name\n"
            << "3- Edit Number\n"
            << "4- Edit Email\n"
            << "5- Edit Job\n"
            << "6- Exit\n"
            << "Select action: ";
        cin >> x;

        switch (x) {
        case 1:
            cout << "Enter old first name: ";
            cin >> oldline;
            cout << "Enter new first name: ";
            cin >> editline;
            break;
        case 2:
            cout << "Enter old last name: ";
            cin >> oldline;
            cout << "Enter new last name: ";
            cin >> editline;
            break;
        case 3:
            cout << "Enter old number: ";
            cin >> oldline;
            cout << "Enter new number: ";
            cin >> editline;
            break;
        case 4:
            cout << "Enter old email: ";
            cin >> oldline;
            cout << "Enter new email: ";
            cin >> editline;
            break;
        case 5:
            cout << "Enter old job: ";
            cin >> oldline;
            cout << "Enter new job: ";
            cin >> editline;
            break;
        case 6:
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
            continue;
        }

        string line;
        while (getline(file, line)) {
            if (line.find(oldline) != string::npos) {
                temp << line.substr(0, line.find(':') + 2) << editline << endl;
            }
            else {
                temp << line << endl;
            }
        }
    } while (x != 6);

    temp.close();
    file.close();
    remove(FILE_NAME.c_str());
    rename("temp.txt", FILE_NAME.c_str());
}
